"""
################################################## 
# Fedora_API_M_WSDL_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################

    Edited by Benjamin O'Steen

    This file is part of python-fedoracommons.

    python-fedoracommons is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    python-fedoracommons is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with python-fedoracommons.  If not, see <http://www.gnu.org/licenses/>.
"""

__license__ = 'GPL http://www.gnu.org/licenses/gpl.txt'
__author__ = "Benjamin O'Steen <bosteen@gmail.com>"
__version__ = '0.1'

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://www.fedora.info/definitions/1/0/types/
##############################

class ns0:
    targetNamespace = "http://www.fedora.info/definitions/2/2/types/"

    class ArrayOfString_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "ArrayOfString")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfString_Def.schema
            TClist = [ZSI.TC.String(pname="item", aname="_item", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._item = []
                    return
            Holder.__name__ = "ArrayOfString_Holder"
            self.pyclass = Holder

    class ComparisonOperator_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "ComparisonOperator")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Condition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "Condition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Condition_Def.schema
            TClist = [ZSI.TC.String(pname="property", aname="_property", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.fedora.info/definitions/1/0/types/","ComparisonOperator",lazy=False)(pname="operator", aname="_operator", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._property = None
                    self._operator = None
                    self._value = None
                    return
            Holder.__name__ = "Condition_Holder"
            self.pyclass = Holder

    class Datastream_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "Datastream")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Datastream_Def.schema
            TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","DatastreamControlGroup",lazy=False)(pname="controlGroup", aname="_controlGroup", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ID", aname="_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="versionID", aname="_versionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),

                      ## ugly hack - fedora returns <altIDs/> and for some reason
                      ## ZSI can't parse this as an array.... just disabling for now
#                      GTD("http://www.fedora.info/definitions/1/0/types/","ArrayOfString",lazy=False)(pname="altIDs", aname="_altIDs", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="altIDs", aname="_altIDs", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="label", aname="_label", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="versionable", aname="_versionable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MIMEType", aname="_MIMEType", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="formatURI", aname="_formatURI", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="createDate", aname="_createDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="location", aname="_location", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="checksumType", aname="_checksumType", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="checksum", aname="_checksum", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._controlGroup = None
                    self._ID = None
                    self._versionID = None
                    self._altIDs = None
                    self._label = None
                    self._versionable = None
                    self._MIMEType = None
                    self._formatURI = None
                    self._createDate = None
                    self._size = None
                    self._state = None
                    self._location = None
                    self._checksumType = None
                    self._checksum = None
                    return
            Holder.__name__ = "Datastream_Holder"
            self.pyclass = Holder

    class DatastreamBindingMap_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "DatastreamBindingMap")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DatastreamBindingMap_Def.schema
            TClist = [ZSI.TC.String(pname="dsBindMapID", aname="_dsBindMapID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsBindMechanismPID", aname="_dsBindMechanismPID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsBindMapLabel", aname="_dsBindMapLabel", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), self.__class__.dsBindings_Dec(minOccurs=1, maxOccurs=1, nillable=True, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dsBindMapID = None
                    self._dsBindMechanismPID = None
                    self._dsBindMapLabel = None
                    self._state = None
                    self._dsBindings = None
                    return
            Holder.__name__ = "DatastreamBindingMap_Holder"
            self.pyclass = Holder


        class dsBindings_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "dsBindings"
            schema = "http://www.fedora.info/definitions/1/0/types/"
            def __init__(self, **kw):
                ns = ns0.DatastreamBindingMap_Def.dsBindings_Dec.schema
                TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","DatastreamBinding",lazy=False)(pname="dsBinding", aname="_dsBinding", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","dsBindings")
                kw["aname"] = "_dsBindings"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._dsBinding = []
                        return
                Holder.__name__ = "dsBindings_Holder"
                self.pyclass = Holder




    class DatastreamBinding_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "DatastreamBinding")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DatastreamBinding_Def.schema
            TClist = [ZSI.TC.String(pname="bindKeyName", aname="_bindKeyName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bindLabel", aname="_bindLabel", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="datastreamID", aname="_datastreamID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="seqNo", aname="_seqNo", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bindKeyName = None
                    self._bindLabel = None
                    self._datastreamID = None
                    self._seqNo = None
                    return
            Holder.__name__ = "DatastreamBinding_Holder"
            self.pyclass = Holder

    class DatastreamControlGroup_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "DatastreamControlGroup")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DatastreamDef_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "DatastreamDef")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DatastreamDef_Def.schema
            TClist = [ZSI.TC.String(pname="ID", aname="_ID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="label", aname="_label", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MIMEType", aname="_MIMEType", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ID = None
                    self._label = None
                    self._MIMEType = None
                    return
            Holder.__name__ = "DatastreamDef_Holder"
            self.pyclass = Holder

    class Disseminator_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "Disseminator")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Disseminator_Def.schema
            TClist = [ZSI.TC.String(pname="bDefPID", aname="_bDefPID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bMechPID", aname="_bMechPID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="createDate", aname="_createDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ID", aname="_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="label", aname="_label", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="versionID", aname="_versionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.fedora.info/definitions/1/0/types/","DatastreamBindingMap",lazy=False)(pname="dsBindMap", aname="_dsBindMap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bDefPID = None
                    self._bMechPID = None
                    self._createDate = None
                    self._ID = None
                    self._label = None
                    self._versionID = None
                    self._dsBindMap = None
                    self._state = None
                    return
            Holder.__name__ = "Disseminator_Holder"
            self.pyclass = Holder

    class FieldSearchQuery_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "FieldSearchQuery")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FieldSearchQuery_Def.schema
            TClist = [self.__class__.conditions_Dec(minOccurs=0, maxOccurs=1, nillable=True, encoded=kw.get("encoded")), ZSI.TC.String(pname="terms", aname="_terms", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._conditions = None
                    self._terms = None
                    return
            Holder.__name__ = "FieldSearchQuery_Holder"
            self.pyclass = Holder


        class conditions_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "conditions"
            schema = "http://www.fedora.info/definitions/1/0/types/"
            def __init__(self, **kw):
                ns = ns0.FieldSearchQuery_Def.conditions_Dec.schema
                TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","Condition",lazy=False)(pname="condition", aname="_condition", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","conditions")
                kw["aname"] = "_conditions"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._condition = []
                        return
                Holder.__name__ = "conditions_Holder"
                self.pyclass = Holder




    class FieldSearchResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "FieldSearchResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FieldSearchResult_Def.schema
            TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","ListSession",lazy=False)(pname="listSession", aname="_listSession", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), self.__class__.resultList_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._listSession = None
                    self._resultList = None
                    return
            Holder.__name__ = "FieldSearchResult_Holder"
            self.pyclass = Holder


        class resultList_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "resultList"
            schema = "http://www.fedora.info/definitions/1/0/types/"
            def __init__(self, **kw):
                ns = ns0.FieldSearchResult_Def.resultList_Dec.schema
                TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","ObjectFields",lazy=False)(pname="objectFields", aname="_objectFields", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","resultList")
                kw["aname"] = "_resultList"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._objectFields = []
                        return
                Holder.__name__ = "resultList_Holder"
                self.pyclass = Holder




    class ListSession_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "ListSession")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ListSession_Def.schema
            TClist = [ZSI.TC.String(pname="token", aname="_token", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname="cursor", aname="_cursor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname="completeListSize", aname="_completeListSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="expirationDate", aname="_expirationDate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._token = None
                    self._cursor = None
                    self._completeListSize = None
                    self._expirationDate = None
                    return
            Holder.__name__ = "ListSession_Holder"
            self.pyclass = Holder

    class MethodParmDef_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "MethodParmDef")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MethodParmDef_Def.schema
            TClist = [ZSI.TC.String(pname="parmName", aname="_parmName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parmType", aname="_parmType", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parmDefaultValue", aname="_parmDefaultValue", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.fedora.info/definitions/1/0/types/","ArrayOfString",lazy=False)(pname="parmDomainValues", aname="_parmDomainValues", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="parmRequired", aname="_parmRequired", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parmLabel", aname="_parmLabel", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parmPassBy", aname="_parmPassBy", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.fedora.info/definitions/1/0/types/","passByRef",lazy=False)(pname="PASS_BY_REF", aname="_PASS_BY_REF", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.fedora.info/definitions/1/0/types/","passByValue",lazy=False)(pname="PASS_BY_VALUE", aname="_PASS_BY_VALUE", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.fedora.info/definitions/1/0/types/","datastreamInputType",lazy=False)(pname="DATASTREAM_INPUT", aname="_DATASTREAM_INPUT", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.fedora.info/definitions/1/0/types/","userInputType",lazy=False)(pname="USER_INPUT", aname="_USER_INPUT", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.fedora.info/definitions/1/0/types/","defaultInputType",lazy=False)(pname="DEFAULT_INPUT", aname="_DEFAULT_INPUT", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._parmName = None
                    self._parmType = None
                    self._parmDefaultValue = None
                    self._parmDomainValues = None
                    self._parmRequired = None
                    self._parmLabel = None
                    self._parmPassBy = None
                    self._PASS_BY_REF = None
                    self._PASS_BY_VALUE = None
                    self._DATASTREAM_INPUT = None
                    self._USER_INPUT = None
                    self._DEFAULT_INPUT = None
                    return
            Holder.__name__ = "MethodParmDef_Holder"
            self.pyclass = Holder

    class MIMETypedStream_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "MIMETypedStream")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MIMETypedStream_Def.schema
            TClist = [ZSI.TC.String(pname="MIMEType", aname="_MIMEType", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname="stream", aname="_stream", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), self.__class__.header_Dec(minOccurs=1, maxOccurs=1, nillable=True, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MIMEType = None
                    self._stream = None
                    self._header = None
                    return
            Holder.__name__ = "MIMETypedStream_Holder"
            self.pyclass = Holder


        class header_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "header"
            schema = "http://www.fedora.info/definitions/1/0/types/"
            def __init__(self, **kw):
                ns = ns0.MIMETypedStream_Def.header_Dec.schema
                TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","Property",lazy=False)(pname="property", aname="_property", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","header")
                kw["aname"] = "_header"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._property = []
                        return
                Holder.__name__ = "header_Holder"
                self.pyclass = Holder




    class ObjectFields_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "ObjectFields")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ObjectFields_Def.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="label", aname="_label", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fType", aname="_fType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cModel", aname="_cModel", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ownerId", aname="_ownerId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cDate", aname="_cDate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mDate", aname="_mDate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dcmDate", aname="_dcmDate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bDef", aname="_bDef", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bMech", aname="_bMech", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="title", aname="_title", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="creator", aname="_creator", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="subject", aname="_subject", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="publisher", aname="_publisher", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="contributor", aname="_contributor", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="date", aname="_date", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="format", aname="_format", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="identifier", aname="_identifier", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="source", aname="_source", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="language", aname="_language", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="relation", aname="_relation", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="coverage", aname="_coverage", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rights", aname="_rights", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._label = None
                    self._fType = None
                    self._cModel = None
                    self._state = None
                    self._ownerId = None
                    self._cDate = None
                    self._mDate = None
                    self._dcmDate = None
                    self._bDef = []
                    self._bMech = []
                    self._title = []
                    self._creator = []
                    self._subject = []
                    self._description = []
                    self._publisher = []
                    self._contributor = []
                    self._date = []
                    self._type = []
                    self._format = []
                    self._identifier = []
                    self._source = []
                    self._language = []
                    self._relation = []
                    self._coverage = []
                    self._rights = []
                    return
            Holder.__name__ = "ObjectFields_Holder"
            self.pyclass = Holder

    class ObjectMethodsDef_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "ObjectMethodsDef")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ObjectMethodsDef_Def.schema
            TClist = [ZSI.TC.String(pname="PID", aname="_PID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bDefPID", aname="_bDefPID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="methodName", aname="_methodName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.methodParmDefs_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="asOfDate", aname="_asOfDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PID = None
                    self._bDefPID = None
                    self._methodName = None
                    self._methodParmDefs = None
                    self._asOfDate = None
                    return
            Holder.__name__ = "ObjectMethodsDef_Holder"
            self.pyclass = Holder


        class methodParmDefs_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "methodParmDefs"
            schema = "http://www.fedora.info/definitions/1/0/types/"
            def __init__(self, **kw):
                ns = ns0.ObjectMethodsDef_Def.methodParmDefs_Dec.schema
                TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","MethodParmDef",lazy=False)(pname="methodParmDef", aname="_methodParmDef", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","methodParmDefs")
                kw["aname"] = "_methodParmDefs"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._methodParmDef = []
                        return
                Holder.__name__ = "methodParmDefs_Holder"
                self.pyclass = Holder




    class ObjectProfile_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "ObjectProfile")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ObjectProfile_Def.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="objLabel", aname="_objLabel", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="objContentModel", aname="_objContentModel", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="objType", aname="_objType", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="objCreateDate", aname="_objCreateDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="objLastModDate", aname="_objLastModDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="objDissIndexViewURL", aname="_objDissIndexViewURL", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="objItemIndexViewURL", aname="_objItemIndexViewURL", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._objLabel = None
                    self._objContentModel = None
                    self._objType = None
                    self._objCreateDate = None
                    self._objLastModDate = None
                    self._objDissIndexViewURL = None
                    self._objItemIndexViewURL = None
                    return
            Holder.__name__ = "ObjectProfile_Holder"
            self.pyclass = Holder

    class Property_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "Property")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Property_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._value = None
                    return
            Holder.__name__ = "Property_Holder"
            self.pyclass = Holder

    class RepositoryInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "RepositoryInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RepositoryInfo_Def.schema
            TClist = [ZSI.TC.String(pname="repositoryName", aname="_repositoryName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="repositoryVersion", aname="_repositoryVersion", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="repositoryBaseURL", aname="_repositoryBaseURL", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="repositoryPIDNamespace", aname="_repositoryPIDNamespace", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="defaultExportFormat", aname="_defaultExportFormat", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="OAINamespace", aname="_OAINamespace", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.fedora.info/definitions/1/0/types/","ArrayOfString",lazy=False)(pname="adminEmailList", aname="_adminEmailList", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="samplePID", aname="_samplePID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sampleOAIIdentifier", aname="_sampleOAIIdentifier", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sampleSearchURL", aname="_sampleSearchURL", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sampleAccessURL", aname="_sampleAccessURL", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sampleOAIURL", aname="_sampleOAIURL", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.fedora.info/definitions/1/0/types/","ArrayOfString",lazy=False)(pname="retainPIDs", aname="_retainPIDs", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._repositoryName = None
                    self._repositoryVersion = None
                    self._repositoryBaseURL = None
                    self._repositoryPIDNamespace = None
                    self._defaultExportFormat = None
                    self._OAINamespace = None
                    self._adminEmailList = None
                    self._samplePID = None
                    self._sampleOAIIdentifier = None
                    self._sampleSearchURL = None
                    self._sampleAccessURL = None
                    self._sampleOAIURL = None
                    self._retainPIDs = None
                    return
            Holder.__name__ = "RepositoryInfo_Holder"
            self.pyclass = Holder

    class UserInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "UserInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.UserInfo_Def.schema
            TClist = [ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="administrator", aname="_administrator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._administrator = None
                    return
            Holder.__name__ = "UserInfo_Holder"
            self.pyclass = Holder

    class passByRef_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "passByRef")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class passByValue_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "passByValue")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class datastreamInputType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "datastreamInputType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class userInputType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "userInputType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class defaultInputType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/0/types/"
        type = (schema, "defaultInputType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class describeRepository_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "describeRepository"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.describeRepository_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","describeRepository")
            kw["aname"] = "_describeRepository"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "describeRepository_Holder"
            self.pyclass = Holder

    class describeRepositoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "describeRepositoryResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.describeRepositoryResponse_Dec.schema
            TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","RepositoryInfo",lazy=False)(pname="repositoryInfo", aname="_repositoryInfo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","describeRepositoryResponse")
            kw["aname"] = "_describeRepositoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._repositoryInfo = None
                    return
            Holder.__name__ = "describeRepositoryResponse_Holder"
            self.pyclass = Holder

    class getObjectProfile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getObjectProfile"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getObjectProfile_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="asOfDateTime", aname="_asOfDateTime", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getObjectProfile")
            kw["aname"] = "_getObjectProfile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._asOfDateTime = None
                    return
            Holder.__name__ = "getObjectProfile_Holder"
            self.pyclass = Holder

    class getObjectProfileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getObjectProfileResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getObjectProfileResponse_Dec.schema
            TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","ObjectProfile",lazy=False)(pname="objectProfile", aname="_objectProfile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getObjectProfileResponse")
            kw["aname"] = "_getObjectProfileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._objectProfile = None
                    return
            Holder.__name__ = "getObjectProfileResponse_Holder"
            self.pyclass = Holder

    class listMethods_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "listMethods"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.listMethods_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="asOfDateTime", aname="_asOfDateTime", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","listMethods")
            kw["aname"] = "_listMethods"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._asOfDateTime = None
                    return
            Holder.__name__ = "listMethods_Holder"
            self.pyclass = Holder

    class listMethodsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "listMethodsResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.listMethodsResponse_Dec.schema
            TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","ObjectMethodsDef",lazy=False)(pname="objectMethod", aname="_objectMethod", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","listMethodsResponse")
            kw["aname"] = "_listMethodsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._objectMethod = []
                    return
            Holder.__name__ = "listMethodsResponse_Holder"
            self.pyclass = Holder

    class listDatastreams_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "listDatastreams"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.listDatastreams_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="asOfDateTime", aname="_asOfDateTime", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","listDatastreams")
            kw["aname"] = "_listDatastreams"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._asOfDateTime = None
                    return
            Holder.__name__ = "listDatastreams_Holder"
            self.pyclass = Holder

    class listDatastreamsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "listDatastreamsResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.listDatastreamsResponse_Dec.schema
            TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","DatastreamDef",lazy=False)(pname="datastreamDef", aname="_datastreamDef", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","listDatastreamsResponse")
            kw["aname"] = "_listDatastreamsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._datastreamDef = []
                    return
            Holder.__name__ = "listDatastreamsResponse_Holder"
            self.pyclass = Holder

    class getDatastreamDissemination_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDatastreamDissemination"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getDatastreamDissemination_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsID", aname="_dsID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="asOfDateTime", aname="_asOfDateTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getDatastreamDissemination")
            kw["aname"] = "_getDatastreamDissemination"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._dsID = None
                    self._asOfDateTime = None
                    return
            Holder.__name__ = "getDatastreamDissemination_Holder"
            self.pyclass = Holder

    class getDatastreamDisseminationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDatastreamDisseminationResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getDatastreamDisseminationResponse_Dec.schema
            TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","MIMETypedStream",lazy=False)(pname="dissemination", aname="_dissemination", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getDatastreamDisseminationResponse")
            kw["aname"] = "_getDatastreamDisseminationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dissemination = None
                    return
            Holder.__name__ = "getDatastreamDisseminationResponse_Holder"
            self.pyclass = Holder

    class getDissemination_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDissemination"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getDissemination_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bDefPid", aname="_bDefPid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="methodName", aname="_methodName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.parameters_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="asOfDateTime", aname="_asOfDateTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getDissemination")
            kw["aname"] = "_getDissemination"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._bDefPid = None
                    self._methodName = None
                    self._parameters = None
                    self._asOfDateTime = None
                    return
            Holder.__name__ = "getDissemination_Holder"
            self.pyclass = Holder


        class parameters_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "parameters"
            schema = "http://www.fedora.info/definitions/1/0/types/"
            def __init__(self, **kw):
                ns = ns0.getDissemination_Dec.parameters_Dec.schema
                TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","Property",lazy=False)(pname="parameter", aname="_parameter", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","parameters")
                kw["aname"] = "_parameters"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._parameter = []
                        return
                Holder.__name__ = "parameters_Holder"
                self.pyclass = Holder




    class getDisseminationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDisseminationResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getDisseminationResponse_Dec.schema
            TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","MIMETypedStream",lazy=False)(pname="dissemination", aname="_dissemination", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getDisseminationResponse")
            kw["aname"] = "_getDisseminationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dissemination = None
                    return
            Holder.__name__ = "getDisseminationResponse_Holder"
            self.pyclass = Holder

    class findObjects_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "findObjects"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.findObjects_Dec.schema
            TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","ArrayOfString",lazy=False)(pname="resultFields", aname="_resultFields", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname="maxResults", aname="_maxResults", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.fedora.info/definitions/1/0/types/","FieldSearchQuery",lazy=False)(pname="query", aname="_query", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","findObjects")
            kw["aname"] = "_findObjects"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._resultFields = None
                    self._maxResults = None
                    self._query = None
                    return
            Holder.__name__ = "findObjects_Holder"
            self.pyclass = Holder

    class findObjectsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "findObjectsResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.findObjectsResponse_Dec.schema
            TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","FieldSearchResult",lazy=False)(pname="result", aname="_result", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","findObjectsResponse")
            kw["aname"] = "_findObjectsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result = None
                    return
            Holder.__name__ = "findObjectsResponse_Holder"
            self.pyclass = Holder

    class resumeFindObjects_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "resumeFindObjects"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.resumeFindObjects_Dec.schema
            TClist = [ZSI.TC.String(pname="sessionToken", aname="_sessionToken", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","resumeFindObjects")
            kw["aname"] = "_resumeFindObjects"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionToken = None
                    return
            Holder.__name__ = "resumeFindObjects_Holder"
            self.pyclass = Holder

    class resumeFindObjectsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "resumeFindObjectsResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.resumeFindObjectsResponse_Dec.schema
            TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","FieldSearchResult",lazy=False)(pname="result", aname="_result", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","resumeFindObjectsResponse")
            kw["aname"] = "_resumeFindObjectsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result = None
                    return
            Holder.__name__ = "resumeFindObjectsResponse_Holder"
            self.pyclass = Holder

    class getObjectHistory_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getObjectHistory"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getObjectHistory_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getObjectHistory")
            kw["aname"] = "_getObjectHistory"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    return
            Holder.__name__ = "getObjectHistory_Holder"
            self.pyclass = Holder

    class getObjectHistoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getObjectHistoryResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getObjectHistoryResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="modifiedDate", aname="_modifiedDate", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getObjectHistoryResponse")
            kw["aname"] = "_getObjectHistoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modifiedDate = []
                    return
            Holder.__name__ = "getObjectHistoryResponse_Holder"
            self.pyclass = Holder

    class ingest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ingest"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.ingest_Dec.schema
            TClist = [ZSI.TC.Base64String(pname="objectXML", aname="_objectXML", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="format", aname="_format", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logMessage", aname="_logMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","ingest")
            kw["aname"] = "_ingest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._objectXML = None
                    self._format = None
                    self._logMessage = None
                    return
            Holder.__name__ = "ingest_Holder"
            self.pyclass = Holder

    class ingestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ingestResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.ingestResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="objectPID", aname="_objectPID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","ingestResponse")
            kw["aname"] = "_ingestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._objectPID = None
                    return
            Holder.__name__ = "ingestResponse_Holder"
            self.pyclass = Holder

    class ingestObject_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ingestObject"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.ingestObject_Dec.schema
            TClist = [ZSI.TC.Base64String(pname="METSXML", aname="_METSXML", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logMessage", aname="_logMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","ingestObject")
            kw["aname"] = "_ingestObject"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._METSXML = None
                    self._logMessage = None
                    return
            Holder.__name__ = "ingestObject_Holder"
            self.pyclass = Holder

    class ingestObjectResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ingestObjectResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.ingestObjectResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="objectPID", aname="_objectPID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","ingestObjectResponse")
            kw["aname"] = "_ingestObjectResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._objectPID = None
                    return
            Holder.__name__ = "ingestObjectResponse_Holder"
            self.pyclass = Holder

    class modifyObject_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "modifyObject"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.modifyObject_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="label", aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ownerId", aname="_ownerId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logMessage", aname="_logMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","modifyObject")
            kw["aname"] = "_modifyObject"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._state = None
                    self._label = None
                    self._ownerId = None
                    self._logMessage = None
                    return
            Holder.__name__ = "modifyObject_Holder"
            self.pyclass = Holder

    class modifyObjectResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "modifyObjectResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.modifyObjectResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="modifiedDate", aname="_modifiedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","modifyObjectResponse")
            kw["aname"] = "_modifyObjectResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modifiedDate = None
                    return
            Holder.__name__ = "modifyObjectResponse_Holder"
            self.pyclass = Holder

    class getObjectXML_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getObjectXML"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getObjectXML_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getObjectXML")
            kw["aname"] = "_getObjectXML"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    return
            Holder.__name__ = "getObjectXML_Holder"
            self.pyclass = Holder

    class getObjectXMLResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getObjectXMLResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getObjectXMLResponse_Dec.schema
            TClist = [ZSI.TC.Base64String(pname="objectXML", aname="_objectXML", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getObjectXMLResponse")
            kw["aname"] = "_getObjectXMLResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._objectXML = None
                    return
            Holder.__name__ = "getObjectXMLResponse_Holder"
            self.pyclass = Holder

    class export_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "export"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.export_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="format", aname="_format", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="context", aname="_context", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","export")
            kw["aname"] = "_export"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._format = None
                    self._context = None
                    return
            Holder.__name__ = "export_Holder"
            self.pyclass = Holder

    class exportResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "exportResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.exportResponse_Dec.schema
            TClist = [ZSI.TC.Base64String(pname="objectXML", aname="_objectXML", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","exportResponse")
            kw["aname"] = "_exportResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._objectXML = None
                    return
            Holder.__name__ = "exportResponse_Holder"
            self.pyclass = Holder

    class exportObject_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "exportObject"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.exportObject_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","exportObject")
            kw["aname"] = "_exportObject"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    return
            Holder.__name__ = "exportObject_Holder"
            self.pyclass = Holder

    class exportObjectResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "exportObjectResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.exportObjectResponse_Dec.schema
            TClist = [ZSI.TC.Base64String(pname="METSXML", aname="_METSXML", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","exportObjectResponse")
            kw["aname"] = "_exportObjectResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._METSXML = None
                    return
            Holder.__name__ = "exportObjectResponse_Holder"
            self.pyclass = Holder

    class purgeObject_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "purgeObject"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.purgeObject_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logMessage", aname="_logMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="force", aname="_force", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","purgeObject")
            kw["aname"] = "_purgeObject"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._logMessage = None
                    self._force = None
                    return
            Holder.__name__ = "purgeObject_Holder"
            self.pyclass = Holder

    class purgeObjectResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "purgeObjectResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.purgeObjectResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="purgedDate", aname="_purgedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","purgeObjectResponse")
            kw["aname"] = "_purgeObjectResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._purgedDate = None
                    return
            Holder.__name__ = "purgeObjectResponse_Holder"
            self.pyclass = Holder

    class addDatastream_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "addDatastream"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.addDatastream_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsID", aname="_dsID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.fedora.info/definitions/1/0/types/","ArrayOfString",lazy=False)(pname="altIDs", aname="_altIDs", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsLabel", aname="_dsLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="versionable", aname="_versionable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MIMEType", aname="_MIMEType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="formatURI", aname="_formatURI", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsLocation", aname="_dsLocation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="controlGroup", aname="_controlGroup", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsState", aname="_dsState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="checksumType", aname="_checksumType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="checksum", aname="_checksum", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logMessage", aname="_logMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","addDatastream")
            kw["aname"] = "_addDatastream"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._dsID = None
                    self._altIDs = None
                    self._dsLabel = None
                    self._versionable = None
                    self._MIMEType = None
                    self._formatURI = None
                    self._dsLocation = None
                    self._controlGroup = None
                    self._dsState = None
                    self._checksumType = None
                    self._checksum = None
                    self._logMessage = None
                    return
            Holder.__name__ = "addDatastream_Holder"
            self.pyclass = Holder

    class addDatastreamResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "addDatastreamResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.addDatastreamResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="datastreamID", aname="_datastreamID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","addDatastreamResponse")
            kw["aname"] = "_addDatastreamResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._datastreamID = None
                    return
            Holder.__name__ = "addDatastreamResponse_Holder"
            self.pyclass = Holder

    class addDisseminator_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "addDisseminator"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.addDisseminator_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bDefPID", aname="_bDefPID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bMechPID", aname="_bMechPID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dissLabel", aname="_dissLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.fedora.info/definitions/1/0/types/","DatastreamBindingMap",lazy=False)(pname="bindingMap", aname="_bindingMap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dissState", aname="_dissState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logMessage", aname="_logMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","addDisseminator")
            kw["aname"] = "_addDisseminator"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._bDefPID = None
                    self._bMechPID = None
                    self._dissLabel = None
                    self._bindingMap = None
                    self._dissState = None
                    self._logMessage = None
                    return
            Holder.__name__ = "addDisseminator_Holder"
            self.pyclass = Holder

    class addDisseminatorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "addDisseminatorResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.addDisseminatorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="disseminatorID", aname="_disseminatorID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","addDisseminatorResponse")
            kw["aname"] = "_addDisseminatorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._disseminatorID = None
                    return
            Holder.__name__ = "addDisseminatorResponse_Holder"
            self.pyclass = Holder

    class describeUser_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "describeUser"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.describeUser_Dec.schema
            TClist = [ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","describeUser")
            kw["aname"] = "_describeUser"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    return
            Holder.__name__ = "describeUser_Holder"
            self.pyclass = Holder

    class describeUserResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "describeUserResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.describeUserResponse_Dec.schema
            TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","UserInfo",lazy=False)(pname="userInfo", aname="_userInfo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","describeUserResponse")
            kw["aname"] = "_describeUserResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userInfo = None
                    return
            Holder.__name__ = "describeUserResponse_Holder"
            self.pyclass = Holder

    class modifyDatastreamByReference_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "modifyDatastreamByReference"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.modifyDatastreamByReference_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsID", aname="_dsID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.fedora.info/definitions/1/0/types/","ArrayOfString",lazy=False)(pname="altIDs", aname="_altIDs", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsLabel", aname="_dsLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MIMEType", aname="_MIMEType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="formatURI", aname="_formatURI", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsLocation", aname="_dsLocation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="checksumType", aname="_checksumType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="checksum", aname="_checksum", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logMessage", aname="_logMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="force", aname="_force", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","modifyDatastreamByReference")
            kw["aname"] = "_modifyDatastreamByReference"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._dsID = None
                    self._altIDs = None
                    self._dsLabel = None
                    self._MIMEType = None
                    self._formatURI = None
                    self._dsLocation = None
                    self._checksumType = None
                    self._checksum = None
                    self._logMessage = None
                    self._force = None
                    return
            Holder.__name__ = "modifyDatastreamByReference_Holder"
            self.pyclass = Holder

    class modifyDatastreamByReferenceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "modifyDatastreamByReferenceResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.modifyDatastreamByReferenceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="modifiedDate", aname="_modifiedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","modifyDatastreamByReferenceResponse")
            kw["aname"] = "_modifyDatastreamByReferenceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modifiedDate = None
                    return
            Holder.__name__ = "modifyDatastreamByReferenceResponse_Holder"
            self.pyclass = Holder

    class modifyDatastreamByValue_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "modifyDatastreamByValue"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.modifyDatastreamByValue_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsID", aname="_dsID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.fedora.info/definitions/1/0/types/","ArrayOfString",lazy=False)(pname="altIDs", aname="_altIDs", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsLabel", aname="_dsLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MIMEType", aname="_MIMEType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="formatURI", aname="_formatURI", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64Binary(pname="dsContent", aname="_dsContent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="checksumType", aname="_checksumType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="checksum", aname="_checksum", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logMessage", aname="_logMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="force", aname="_force", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","modifyDatastreamByValue")
            kw["aname"] = "_modifyDatastreamByValue"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._dsID = None
                    self._altIDs = None
                    self._dsLabel = None
                    self._MIMEType = None
                    self._formatURI = None
                    self._dsContent = None
                    self._checksumType = None
                    self._checksum = None
                    self._logMessage = None
                    self._force = None
                    return
            Holder.__name__ = "modifyDatastreamByValue_Holder"
            self.pyclass = Holder

    class modifyDatastreamByValueResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "modifyDatastreamByValueResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.modifyDatastreamByValueResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="modifiedDate", aname="_modifiedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","modifyDatastreamByValueResponse")
            kw["aname"] = "_modifyDatastreamByValueResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modifiedDate = None
                    return
            Holder.__name__ = "modifyDatastreamByValueResponse_Holder"
            self.pyclass = Holder

    class modifyDisseminator_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "modifyDisseminator"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.modifyDisseminator_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dissID", aname="_dissID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bMechPID", aname="_bMechPID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dissLabel", aname="_dissLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.fedora.info/definitions/1/0/types/","DatastreamBindingMap",lazy=False)(pname="bindingMap", aname="_bindingMap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dissState", aname="_dissState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logMessage", aname="_logMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="force", aname="_force", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","modifyDisseminator")
            kw["aname"] = "_modifyDisseminator"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._dissID = None
                    self._bMechPID = None
                    self._dissLabel = None
                    self._bindingMap = None
                    self._dissState = None
                    self._logMessage = None
                    self._force = None
                    return
            Holder.__name__ = "modifyDisseminator_Holder"
            self.pyclass = Holder

    class modifyDisseminatorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "modifyDisseminatorResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.modifyDisseminatorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="modifiedDate", aname="_modifiedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","modifyDisseminatorResponse")
            kw["aname"] = "_modifyDisseminatorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modifiedDate = None
                    return
            Holder.__name__ = "modifyDisseminatorResponse_Holder"
            self.pyclass = Holder

    class setDatastreamState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setDatastreamState"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.setDatastreamState_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsID", aname="_dsID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsState", aname="_dsState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logMessage", aname="_logMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","setDatastreamState")
            kw["aname"] = "_setDatastreamState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._dsID = None
                    self._dsState = None
                    self._logMessage = None
                    return
            Holder.__name__ = "setDatastreamState_Holder"
            self.pyclass = Holder

    class setDatastreamStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setDatastreamStateResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.setDatastreamStateResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="modifiedDate", aname="_modifiedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","setDatastreamStateResponse")
            kw["aname"] = "_setDatastreamStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modifiedDate = None
                    return
            Holder.__name__ = "setDatastreamStateResponse_Holder"
            self.pyclass = Holder

    class setDatastreamVersionable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setDatastreamVersionable"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.setDatastreamVersionable_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsID", aname="_dsID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="versionable", aname="_versionable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logMessage", aname="_logMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","setDatastreamVersionable")
            kw["aname"] = "_setDatastreamVersionable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._dsID = None
                    self._versionable = None
                    self._logMessage = None
                    return
            Holder.__name__ = "setDatastreamVersionable_Holder"
            self.pyclass = Holder

    class setDatastreamVersionableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setDatastreamVersionableResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.setDatastreamVersionableResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="modifiedDate", aname="_modifiedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","setDatastreamVersionableResponse")
            kw["aname"] = "_setDatastreamVersionableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modifiedDate = None
                    return
            Holder.__name__ = "setDatastreamVersionableResponse_Holder"
            self.pyclass = Holder

    class compareDatastreamChecksum_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "compareDatastreamChecksum"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.compareDatastreamChecksum_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsID", aname="_dsID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="versionDate", aname="_versionDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","compareDatastreamChecksum")
            kw["aname"] = "_compareDatastreamChecksum"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._dsID = None
                    self._versionDate = None
                    return
            Holder.__name__ = "compareDatastreamChecksum_Holder"
            self.pyclass = Holder

    class compareDatastreamChecksumResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "compareDatastreamChecksumResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.compareDatastreamChecksumResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="checksum", aname="_checksum", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","compareDatastreamChecksumResponse")
            kw["aname"] = "_compareDatastreamChecksumResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._checksum = None
                    return
            Holder.__name__ = "compareDatastreamChecksumResponse_Holder"
            self.pyclass = Holder

    class setDisseminatorState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setDisseminatorState"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.setDisseminatorState_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dissID", aname="_dissID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dissState", aname="_dissState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logMessage", aname="_logMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","setDisseminatorState")
            kw["aname"] = "_setDisseminatorState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._dissID = None
                    self._dissState = None
                    self._logMessage = None
                    return
            Holder.__name__ = "setDisseminatorState_Holder"
            self.pyclass = Holder

    class setDisseminatorStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setDisseminatorStateResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.setDisseminatorStateResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="modifiedDate", aname="_modifiedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","setDisseminatorStateResponse")
            kw["aname"] = "_setDisseminatorStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modifiedDate = None
                    return
            Holder.__name__ = "setDisseminatorStateResponse_Holder"
            self.pyclass = Holder

    class getDatastream_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDatastream"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getDatastream_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsID", aname="_dsID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="asOfDateTime", aname="_asOfDateTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getDatastream")
            kw["aname"] = "_getDatastream"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._dsID = None
                    self._asOfDateTime = None
                    return
            Holder.__name__ = "getDatastream_Holder"
            self.pyclass = Holder

    class getDatastreamResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDatastreamResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getDatastreamResponse_Dec.schema
            TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","Datastream",lazy=False)(pname="datastream", aname="_datastream", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getDatastreamResponse")
            kw["aname"] = "_getDatastreamResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._datastream = None
                    return
            Holder.__name__ = "getDatastreamResponse_Holder"
            self.pyclass = Holder

    class getDatastreams_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDatastreams"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getDatastreams_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="asOfDateTime", aname="_asOfDateTime", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsState", aname="_dsState", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getDatastreams")
            kw["aname"] = "_getDatastreams"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._asOfDateTime = None
                    self._dsState = None
                    return
            Holder.__name__ = "getDatastreams_Holder"
            self.pyclass = Holder

    class getDatastreamsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDatastreamsResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getDatastreamsResponse_Dec.schema
            TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","Datastream",lazy=False)(pname="datastream", aname="_datastream", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getDatastreamsResponse")
            kw["aname"] = "_getDatastreamsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._datastream = []
                    return
            Holder.__name__ = "getDatastreamsResponse_Holder"
            self.pyclass = Holder

    class getDatastreamHistory_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDatastreamHistory"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getDatastreamHistory_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsID", aname="_dsID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getDatastreamHistory")
            kw["aname"] = "_getDatastreamHistory"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._dsID = None
                    return
            Holder.__name__ = "getDatastreamHistory_Holder"
            self.pyclass = Holder

    class getDatastreamHistoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDatastreamHistoryResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getDatastreamHistoryResponse_Dec.schema
            TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","Datastream",lazy=False)(pname="datastream", aname="_datastream", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getDatastreamHistoryResponse")
            kw["aname"] = "_getDatastreamHistoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._datastream = []
                    return
            Holder.__name__ = "getDatastreamHistoryResponse_Holder"
            self.pyclass = Holder

    class getDisseminator_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDisseminator"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getDisseminator_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dissID", aname="_dissID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="asOfDateTime", aname="_asOfDateTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getDisseminator")
            kw["aname"] = "_getDisseminator"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._dissID = None
                    self._asOfDateTime = None
                    return
            Holder.__name__ = "getDisseminator_Holder"
            self.pyclass = Holder

    class getDisseminatorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDisseminatorResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getDisseminatorResponse_Dec.schema
            TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","Disseminator",lazy=False)(pname="disseminator", aname="_disseminator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getDisseminatorResponse")
            kw["aname"] = "_getDisseminatorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._disseminator = None
                    return
            Holder.__name__ = "getDisseminatorResponse_Holder"
            self.pyclass = Holder

    class getDisseminators_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDisseminators"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getDisseminators_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="asOfDateTime", aname="_asOfDateTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dissState", aname="_dissState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getDisseminators")
            kw["aname"] = "_getDisseminators"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._asOfDateTime = None
                    self._dissState = None
                    return
            Holder.__name__ = "getDisseminators_Holder"
            self.pyclass = Holder

    class getDisseminatorsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDisseminatorsResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getDisseminatorsResponse_Dec.schema
            TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","Disseminator",lazy=False)(pname="disseminator", aname="_disseminator", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getDisseminatorsResponse")
            kw["aname"] = "_getDisseminatorsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._disseminator = []
                    return
            Holder.__name__ = "getDisseminatorsResponse_Holder"
            self.pyclass = Holder

    class getDisseminatorHistory_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDisseminatorHistory"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getDisseminatorHistory_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dissID", aname="_dissID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getDisseminatorHistory")
            kw["aname"] = "_getDisseminatorHistory"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._dissID = None
                    return
            Holder.__name__ = "getDisseminatorHistory_Holder"
            self.pyclass = Holder

    class getDisseminatorHistoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDisseminatorHistoryResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getDisseminatorHistoryResponse_Dec.schema
            TClist = [GTD("http://www.fedora.info/definitions/1/0/types/","Disseminator",lazy=False)(pname="disseminator", aname="_disseminator", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getDisseminatorHistoryResponse")
            kw["aname"] = "_getDisseminatorHistoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._disseminator = []
                    return
            Holder.__name__ = "getDisseminatorHistoryResponse_Holder"
            self.pyclass = Holder

    class purgeDatastream_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "purgeDatastream"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.purgeDatastream_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsID", aname="_dsID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="startDT", aname="_startDT", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="endDT", aname="_endDT", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logMessage", aname="_logMessage", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="force", aname="_force", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","purgeDatastream")
            kw["aname"] = "_purgeDatastream"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._dsID = None
                    self._startDT = None
                    self._endDT = None
                    self._logMessage = None
                    self._force = None
                    return
            Holder.__name__ = "purgeDatastream_Holder"
            self.pyclass = Holder

    class purgeDatastreamResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "purgeDatastreamResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.purgeDatastreamResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="purgedVersionDate", aname="_purgedVersionDate", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","purgeDatastreamResponse")
            kw["aname"] = "_purgeDatastreamResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._purgedVersionDate = []
                    return
            Holder.__name__ = "purgeDatastreamResponse_Holder"
            self.pyclass = Holder

    class purgeDisseminator_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "purgeDisseminator"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.purgeDisseminator_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dissID", aname="_dissID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="endDT", aname="_endDT", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logMessage", aname="_logMessage", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","purgeDisseminator")
            kw["aname"] = "_purgeDisseminator"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._dissID = None
                    self._endDT = None
                    self._logMessage = None
                    return
            Holder.__name__ = "purgeDisseminator_Holder"
            self.pyclass = Holder

    class purgeDisseminatorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "purgeDisseminatorResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.purgeDisseminatorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="purgedVersionDate", aname="_purgedVersionDate", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","purgeDisseminatorResponse")
            kw["aname"] = "_purgeDisseminatorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._purgedVersionDate = []
                    return
            Holder.__name__ = "purgeDisseminatorResponse_Holder"
            self.pyclass = Holder

    class getNextPID_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getNextPID"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getNextPID_Dec.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname="numPIDs", aname="_numPIDs", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pidNamespace", aname="_pidNamespace", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getNextPID")
            kw["aname"] = "_getNextPID"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._numPIDs = None
                    self._pidNamespace = None
                    return
            Holder.__name__ = "getNextPID_Holder"
            self.pyclass = Holder

    class getNextPIDResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getNextPIDResponse"
        schema = "http://www.fedora.info/definitions/1/0/types/"
        def __init__(self, **kw):
            ns = ns0.getNextPIDResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="pid", aname="_pid", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.fedora.info/definitions/1/0/types/","getNextPIDResponse")
            kw["aname"] = "_getNextPIDResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = []
                    return
            Holder.__name__ = "getNextPIDResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://www.fedora.info/definitions/1/0/types/)

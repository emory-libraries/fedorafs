"""
################################################## 
# Fedora_API_M_Service_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################

    Edited by Benjamin O'Steen

    This file is part of python-fedoracommons.

    python-fedoracommons is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    python-fedoracommons is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with python-fedoracommons.  If not, see <http://www.gnu.org/licenses/>.
"""

__license__ = 'GPL http://www.gnu.org/licenses/gpl.txt'
__author__ = "Benjamin O'Steen <bosteen@gmail.com>"
__version__ = '0.1'

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://www.fedora.info/definitions/1/1/types/
##############################

class FedoraAPI_2_0_ns:
    targetNamespace = "http://www.fedora.info/definitions/1/1/types/"

    class UserInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/1/types/"
        type = (schema, "UserInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = FedoraAPI_2_0_ns.UserInfo_Def.schema
            TClist = [ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="administrator", aname="_administrator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._administrator = None
                    return
            Holder.__name__ = "UserInfo_Holder"
            self.pyclass = Holder

    class DatastreamControlGroup_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/1/types/"
        type = (schema, "DatastreamControlGroup")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DatastreamBinding_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/1/types/"
        type = (schema, "DatastreamBinding")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = FedoraAPI_2_0_ns.DatastreamBinding_Def.schema
            TClist = [ZSI.TC.String(pname="bindKeyName", aname="_bindKeyName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bindLabel", aname="_bindLabel", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="datastreamID", aname="_datastreamID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="seqNo", aname="_seqNo", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bindKeyName = None
                    self._bindLabel = None
                    self._datastreamID = None
                    self._seqNo = None
                    return
            Holder.__name__ = "DatastreamBinding_Holder"
            self.pyclass = Holder

    class ArrayOfDatastreamBinding_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://www.fedora.info/definitions/1/1/types/"
        type = (schema, "ArrayOfDatastreamBinding")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = FedoraAPI_2_0_ns.DatastreamBinding_Def(None, typed=False)
            atype = (u'http://www.fedora.info/definitions/1/1/types/', u'DatastreamBinding[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class DatastreamBindingMap_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/1/types/"
        type = (schema, "DatastreamBindingMap")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = FedoraAPI_2_0_ns.DatastreamBindingMap_Def.schema
            TClist = [ZSI.TC.String(pname="dsBindMapID", aname="_dsBindMapID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsBindMechanismPID", aname="_dsBindMechanismPID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dsBindMapLabel", aname="_dsBindMapLabel", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.fedora.info/definitions/1/1/types/","ArrayOfDatastreamBinding",lazy=False)(pname="dsBindings", aname="_dsBindings", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dsBindMapID = None
                    self._dsBindMechanismPID = None
                    self._dsBindMapLabel = None
                    self._state = None
                    self._dsBindings = None
                    return
            Holder.__name__ = "DatastreamBindingMap_Holder"
            self.pyclass = Holder

    class Disseminator_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/1/types/"
        type = (schema, "Disseminator")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = FedoraAPI_2_0_ns.Disseminator_Def.schema
            TClist = [ZSI.TC.String(pname="bDefPID", aname="_bDefPID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bMechPID", aname="_bMechPID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="createDate", aname="_createDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ID", aname="_ID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="label", aname="_label", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="versionID", aname="_versionID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.fedora.info/definitions/1/1/types/","DatastreamBindingMap",lazy=False)(pname="dsBindMap", aname="_dsBindMap", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bDefPID = None
                    self._bMechPID = None
                    self._createDate = None
                    self._ID = None
                    self._label = None
                    self._versionID = None
                    self._dsBindMap = None
                    self._state = None
                    return
            Holder.__name__ = "Disseminator_Holder"
            self.pyclass = Holder

    class ArrayOfString_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://www.fedora.info/definitions/1/1/types/"
        type = (schema, "ArrayOfString")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TC.String(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'string[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class Datastream_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.fedora.info/definitions/1/1/types/"
        type = (schema, "Datastream")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = FedoraAPI_2_0_ns.Datastream_Def.schema
            TClist = [GTD("http://www.fedora.info/definitions/1/1/types/","DatastreamControlGroup",lazy=False)(pname="controlGroup", aname="_controlGroup", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ID", aname="_ID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="versionID", aname="_versionID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.fedora.info/definitions/1/1/types/","ArrayOfString",lazy=False)(pname="altIDs", aname="_altIDs", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="label", aname="_label", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="versionable", aname="_versionable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MIMEType", aname="_MIMEType", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="formatURI", aname="_formatURI", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="createDate", aname="_createDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="location", aname="_location", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._controlGroup = None
                    self._ID = None
                    self._versionID = None
                    self._altIDs = None
                    self._label = None
                    self._versionable = None
                    self._MIMEType = None
                    self._formatURI = None
                    self._createDate = None
                    self._size = None
                    self._state = None
                    self._location = None
                    return
            Holder.__name__ = "Datastream_Holder"
            self.pyclass = Holder

    class ArrayOfDatastream_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://www.fedora.info/definitions/1/1/types/"
        type = (schema, "ArrayOfDatastream")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = FedoraAPI_2_0_ns.Datastream_Def(None, typed=False)
            atype = (u'http://www.fedora.info/definitions/1/1/types/', u'Datastream[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class ArrayOfDisseminator_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://www.fedora.info/definitions/1/1/types/"
        type = (schema, "ArrayOfDisseminator")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = FedoraAPI_2_0_ns.Disseminator_Def(None, typed=False)
            atype = (u'http://www.fedora.info/definitions/1/1/types/', u'Disseminator[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class ArrayOfDateTimeString_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://www.fedora.info/definitions/1/1/types/"
        type = (schema, "ArrayOfDateTimeString")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TC.String(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'string[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

# end class FedoraAPI_2_0_ns (tns: http://www.fedora.info/definitions/1/1/types/)
